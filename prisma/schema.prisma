// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id            String         @id @default(cuid())
  name          String
  users         User[]
  Ticket        Ticket[]
  customers     Customer[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailAccounts EmailAccount[]
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  Ticket         Ticket[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  emailAccounts  EmailAccount[] @relation("ConnectedByUserEmailAccounts")

  messages Message[] @relation("UserMessages")
}

model Ticket {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  title       String
  description String?

  status   TicketStatus   @default(OPEN)
  priority TicketPriority @default(MEDIUM)

  assignedToId String?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  channel TicketChannel

  messages Message[]

  firstResponseAt      DateTime?
  expectedResolutionAt DateTime?
  resolvedAt           DateTime?
  closedAt             DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Customer {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  externalId     String?
  name           String?
  email          String?
  phone          String?
  meta           Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  tickets Ticket[]

  messages Message[] @relation("CustomerMessages")
}

enum EmailPartner {
  gmail
}

model EmailAccount {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  partner        EmailPartner
  email          String
  accessToken    String
  refreshToken   String
  isActive       Boolean      @default(true)
  meta           Json?
  connectedById  String
  connectedBy    User         @relation("ConnectedByUserEmailAccounts", fields: [connectedById], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, email])
}

enum TicketChannel {
  EMAIL
}

model Message {
  id       String @id @default(cuid())
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  authorUserId     String?
  authorUser       User?     @relation("UserMessages", fields: [authorUserId], references: [id])
  authorCustomerId String?
  authorCustomer   Customer? @relation("CustomerMessages", fields: [authorCustomerId], references: [id])

  plainTextContent String?
  htmlContent      String?

  isInternal Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
